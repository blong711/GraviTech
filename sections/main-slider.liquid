{% schema %}
{
  "name": "t:sections.main_slider.name",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "select",
      "id": "width",
      "label": "t:sections.main_slider.settings.width.label",
      "options": [
        {
          "value": "container",
          "label": "t:sections.main_slider.settings.width.options.boxed"
        },
        {
          "value": "container-full",
          "label": "t:sections.main_slider.settings.width.options.full_width"
        }
      ],
      "default": "container"
    },
    {
      "type": "select",
      "id": "height",
      "label": "t:sections.main_slider.settings.height.label",
      "options": [
        {
          "value": "adapt-first",
          "label": "t:sections.main_slider.settings.height.options.adapt_first"
        },
        {
          "value": "fill",
          "label": "t:sections.main_slider.settings.height.options.fill"
        },
        {
          "value": "fixed",
          "label": "t:sections.main_slider.settings.height.options.fixed"
        }
      ],
      "default": "adapt-first"
    },
    {
      "type": "range",
      "id": "height_fixed",
      "label": "t:sections.main_slider.settings.height_fixed.label",
      "min": 100,
      "max": 1000,
      "step": 10,
      "unit": "px",
      "default": 500,
      "info": "t:sections.main_slider.settings.height_fixed.info"
    },
    {
      "type": "select",
      "id": "mobile_height",
      "label": "t:sections.main_slider.settings.mobile_height.label",
      "options": [
        {
          "value": "adapt-first",
          "label": "t:sections.main_slider.settings.mobile_height.options.adapt"
        },
        {
          "value": "fixed",
          "label": "t:sections.main_slider.settings.mobile_height.options.fixed"
        }
      ],
      "default": "adapt-first"
    },
    {
      "type": "range",
      "id": "mobile_height_fixed",
      "label": "t:sections.main_slider.settings.mobile_height_fixed.label",
      "min": 100,
      "max": 800,
      "step": 10,
      "unit": "px",
      "default": 300,
      "info": "t:sections.main_slider.settings.mobile_height_fixed.info"
    },
    {
      "type": "header",
      "content": "t:sections.main_slider.settings.slider_settings.content"
    },
    {
      "type": "checkbox",
      "id": "loop",
      "label": "t:sections.main_slider.settings.loop.label",
      "default": true
    },
    {
      "type": "range",
      "id": "autoplay_speed",
      "label": "t:sections.main_slider.settings.autoplay_speed.label",
      "min": 0,
      "max": 10,
      "step": 0.5,
      "default": 5,
      "info": "t:sections.main_slider.settings.autoplay_speed.info"
    },
    {
      "type": "checkbox",
      "id": "pause_on_hover",
      "label": "t:sections.main_slider.settings.pause_on_hover.label",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "draggable",
      "label": "t:sections.main_slider.settings.draggable.label",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "t:sections.main_slider.settings.show_arrows.label",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_arrows_mobile",
      "label": "t:sections.main_slider.settings.show_arrows_mobile.label",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "t:sections.main_slider.settings.show_dots.label",
      "default": true
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding_mobile_rate",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "%",
      "label": "t:sections.top_bar.settings.padding_mobile_rate.label",
      "default": 75,
      "info": "t:sections.top_bar.settings.padding_mobile_rate.info"
    }
  ],
  "blocks": [
    {
      "type": "slide",
      "name": "t:sections.main_slider.blocks.slide.name",
      "limit": 5,
      "settings": [
        {
          "type": "color_scheme",
          "id": "color_scheme",
          "label": "t:sections.all.colors.label"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:sections.main_slider.blocks.slide.settings.image.label"
        },
        {
          "type": "image_picker",
          "id": "mobile_image",
          "label": "t:sections.main_slider.blocks.slide.settings.mobile_image.label",
          "info": "t:sections.main_slider.blocks.slide.settings.mobile_image.info"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "t:sections.main_slider.blocks.slide.settings.heading.label",
          "default": "t:sections.main_slider.blocks.slide.settings.heading.default"
        },
        {
          "type": "select",
          "id": "heading_size",
          "label": "t:sections.main_slider.blocks.slide.settings.heading_size.label",
          "options": [
            {
              "value": "display-sm",
              "label": "t:sections.main_slider.blocks.slide.settings.heading_size.options.small"
            },
            {
              "value": "display-md",
              "label": "t:sections.main_slider.blocks.slide.settings.heading_size.options.medium"
            },
            {
              "value": "display-lg",
              "label": "t:sections.main_slider.blocks.slide.settings.heading_size.options.large"
            }
          ],
          "default": "display-md"
        },
        {
          "type": "select",
          "id": "heading_weight",
          "label": "t:sections.main_slider.blocks.slide.settings.heading_weight.label",
          "options": [
            {
              "value": "fw-normal",
              "label": "t:sections.main_slider.blocks.slide.settings.heading_weight.options.normal"
            },
            {
              "value": "fw-medium",
              "label": "t:sections.main_slider.blocks.slide.settings.heading_weight.options.medium"
            },
            {
              "value": "fw-semibold",
              "label": "t:sections.main_slider.blocks.slide.settings.heading_weight.options.semi_bold"
            },
            {
              "value": "fw-bold",
              "label": "t:sections.main_slider.blocks.slide.settings.heading_weight.options.bold"
            }
          ],
          "default": "fw-medium"
        },
        {
          "type": "textarea",
          "id": "description",
          "label": "t:sections.main_slider.blocks.slide.settings.description.label",
          "default": "t:sections.main_slider.blocks.slide.settings.description.default"
        },
        {
          "type": "select",
          "id": "content_alignment",
          "label": "t:sections.main_slider.blocks.slide.settings.content_alignment.label",
          "options": [
            {
              "value": "col-12 col-sm-6 col-lg-5",
              "label": "t:sections.main_slider.blocks.slide.settings.content_alignment.options.left"
            },
            {
              "value": "col-12 col-sm-8 col-lg-6 offset-sm-2 offset-lg-3",
              "label": "t:sections.main_slider.blocks.slide.settings.content_alignment.options.center"
            },
            {
              "value": "col-12 col-sm-6 col-lg-5 offset-sm-6 offset-lg-6",
              "label": "t:sections.main_slider.blocks.slide.settings.content_alignment.options.right"
            }
          ],
          "default": "col-12 col-sm-6 col-lg-5"
        },
        {
          "type": "radio",
          "id": "text_size",
          "label": "t:sections.main_slider.blocks.slide.settings.text_size.label",
          "options": [
            {
              "value": "text-sm",
              "label": "t:sections.main_slider.blocks.slide.settings.text_size.options.small"
            },
            {
              "value": "text-md",
              "label": "t:sections.main_slider.blocks.slide.settings.text_size.options.medium"
            },
            {
              "value": "text-lg",
              "label": "t:sections.main_slider.blocks.slide.settings.text_size.options.large"
            }
          ],
          "default": "text-md"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "t:sections.main_slider.blocks.slide.settings.button_link.label"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "t:sections.main_slider.blocks.slide.settings.button_text.label",
          "default": "t:sections.main_slider.blocks.slide.settings.button_text.default"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "t:sections.main_slider.presets.name",
      "blocks": [
        {
          "type": "slide"
        },
        {
          "type": "slide"
        },
        {
          "type": "slide"
        }
      ]
    }
  ]
}
{% endschema %}

{% style %}
  .slider-height {
    {% if section.settings.height == 'fixed' %}
      height: {{ section.settings.height_fixed }}px;
    {% elsif section.settings.height == 'fill' %}
      height: 100vh;
    {% elsif section.settings.height == 'adapt-first' %}
      height: auto;
    {% endif %}
  }
  
  /* Override CSS constraints for adapt-first to use actual image heights */
  .slider-height[data-height="adapt-first"] .slider-wrap .image {
    height: auto !important;
  }
  
  .slider-height[data-height="adapt-first"] .slider-wrap img {
    height: auto !important;
    width: 100% !important;
    object-fit: contain !important;
  }
  
  .slider-height[data-height="adapt-first"] .swiper-slide {
    height: auto !important;
    min-height: auto !important;
    max-height: none !important;
  }
  
  .slider-height[data-height="adapt-first"] .slider-wrap {
    height: auto !important;
    min-height: auto !important;
    max-height: none !important;
  }
  
  /* Override Swiper's internal height management */
  .slider-height[data-height="adapt-first"] .swiper-wrapper {
    height: auto !important;
    align-items: stretch !important;
  }
  
  .slider-height[data-height="adapt-first"] .swiper {
    height: auto !important;
  }
  
  .slider-height[data-height="adapt-first"] .tf-sw-slideshow {
    height: auto !important;
  }
  
  @media (max-width: 767px) {
    .slider-height {
      {% if section.settings.mobile_height == 'fixed' %}
        height: {{ section.settings.mobile_height_fixed }}px;
      {% elsif section.settings.mobile_height == 'adapt-first' %}
        height: auto !important;
      {% endif %}
    }
    
    /* Mobile-specific adapt-first styles - more aggressive overrides */
    .slider-height[data-height="adapt-first"] .slider-wrap .image,
    .slider-height[data-mobile-height="adapt-first"] .slider-wrap .image {
      height: auto !important;
    }
    
    .slider-height[data-height="adapt-first"] .slider-wrap img,
    .slider-height[data-mobile-height="adapt-first"] .slider-wrap img {
      height: auto !important;
      width: 100% !important;
      object-fit: contain !important;
    }
    
    .slider-height[data-height="adapt-first"] .swiper-slide,
    .slider-height[data-mobile-height="adapt-first"] .swiper-slide {
      height: auto !important;
      min-height: auto !important;
      max-height: none !important;
    }
    
    .slider-height[data-height="adapt-first"] .slider-wrap,
    .slider-height[data-mobile-height="adapt-first"] .slider-wrap {
      height: auto !important;
      min-height: auto !important;
      max-height: none !important;
    }
    
    .slider-height[data-height="adapt-first"] .swiper-wrapper,
    .slider-height[data-mobile-height="adapt-first"] .swiper-wrapper {
      height: auto !important;
      align-items: stretch !important;
    }
    
    .slider-height[data-height="adapt-first"] .swiper,
    .slider-height[data-mobile-height="adapt-first"] .swiper {
      height: auto !important;
    }
    
    .slider-height[data-height="adapt-first"] .tf-sw-slideshow,
    .slider-height[data-mobile-height="adapt-first"] .tf-sw-slideshow {
      height: auto !important;
    }
    
    /* Additional mobile-specific overrides to ensure height is respected */
    .slider-height[data-mobile-height="adapt-first"] {
      height: auto !important;
    }
    
    .slider-height[data-mobile-height="adapt-first"] * {
      box-sizing: border-box !important;
    }
    
    /* Force all slides to have the same height on mobile */
    .slider-height[data-mobile-height="adapt-first"] .swiper-slide {
      height: inherit !important;
      min-height: inherit !important;
      max-height: inherit !important;
    }
    
    .slider-height[data-mobile-height="adapt-first"] .slider-wrap {
      height: inherit !important;
      min-height: inherit !important;
      max-height: inherit !important;
    }
    

  }
  
  .section-{{ section.id }}-padding {
    padding-top: calc({{ section.settings.padding_top }}px * {{ section.settings.padding_mobile_rate | divided_by: 100.0 }});
    padding-bottom: calc({{ section.settings.padding_bottom }}px * {{ section.settings.padding_mobile_rate | divided_by: 100.0 }});
  }
  
  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
  {% endstyle %}
  

<section class="tf-slideshow slider-electric-access slider-default color-{{ section.settings.color_scheme }} gradient section-{{ section.id }}-padding">
    <div class="{{ section.settings.width }}">
        <div class="row">
            <div class="col-lg-12">
                <div class="swiper tf-sw-slideshow slider-effect-fade slider-height" 
                    data-slider-id="{{ section.id }}"
                    data-height="{{ section.settings.height }}"
                    data-mobile-height="{{ section.settings.mobile_height }}"
                    data-preview="1" 
                    data-tablet="1"
                    data-mobile="1" 
                    data-centered="false" 
                    data-space="0" 
                    data-space-mb="0" 
                    data-loop="{{ section.settings.loop }}"
                    {% assign autoplay_ms = section.settings.autoplay_speed | times: 1000 %}
                    data-auto-play="{% if autoplay_ms > 0 %}true{% else %}false{% endif %}"
                    data-delay="{{ autoplay_ms }}"
                    data-simulate-touch="{{ section.settings.draggable }}"
                    data-pause-on-hover="{{ section.settings.pause_on_hover }}">
                    <div class="swiper-wrapper">
                        {% for block in section.blocks %}
                            {% if block.type == 'slide' %}
                                <div class="swiper-slide color-{{ block.settings.color_scheme | default: section.settings.color_scheme }} gradient" {{ block.shopify_attributes }}>
                                    <div class="slider-wrap">
                                        <div class="image">
                                                                                            {% if block.settings.image %}
                                                {% assign image_class = 'lazyload' %}
                                                {% if section.settings.height == 'fill' or section.settings.height == 'fixed' %}
                                                    {% assign image_class = image_class | append: ' w-100 h-100 object-fit-cover' %}
                                                {% endif %}
                                                
                                                {% assign desktop_image_class = image_class | append: ' d-none d-md-block' %}
                                                {% assign mobile_image_class = image_class | append: ' d-md-none' %}
                                                
                                                {{ block.settings.image | image_url: width: 1920 | image_tag: 
                                                    loading: 'lazy',
                                                    class: desktop_image_class,
                                                    alt: block.settings.heading
                                                }}

                                                {% if block.settings.mobile_image %}
                                                    {{ block.settings.mobile_image | image_url: width: 767 | image_tag: 
                                                        loading: 'lazy',
                                                        class: mobile_image_class,
                                                        alt: block.settings.heading
                                                    }}
                                                {% else %}
                                                    {{ block.settings.image | image_url: width: 767 | image_tag: 
                                                        loading: 'lazy',
                                                        class: mobile_image_class,
                                                        alt: block.settings.heading
                                                    }}
                                                {% endif %}
                                            {% endif %}
                                        </div>
                                        <div class="box-content">
                                            <div class="container">
                                                <div class="row">
                                                    <div class="{{ block.settings.content_alignment }}">
                                                        <div class="content-slider">
                                                            <div class="box-title-slider">
                                                                <h4 class="heading {{ block.settings.heading_size }} {{ block.settings.heading_weight }} fade-item fade-item-1">
                                                                    {{ block.settings.heading }}
                                                                </h4>
                                                                <p class="sub {{ block.settings.text_size }} fade-item fade-item-2" style="color: rgb(var(--color-foreground2));">
                                                                    {{ block.settings.description }}
                                                                </p>
                                                            </div>
                                                            {% if block.settings.button_link %}
                                                                <div class="box-btn-slider fade-item fade-item-3">
                                                                    <a href="{{ block.settings.button_link }}"
                                                                        class="tf-btn animate-btn">
                                                                        {{ block.settings.button_text }}
                                                                    </a>
                                                                </div>
                                                            {% endif %}
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                    {% if section.settings.show_arrows or section.settings.show_arrows_mobile %}
                      <div class="navigation-next-slider swiper-button-next {% unless section.settings.show_arrows_mobile %}d-none d-md-block{% endunless %} {% unless section.settings.show_arrows %}d-block d-md-none{% endunless %}"></div>
                      <div class="navigation-prev-slider swiper-button-prev {% unless section.settings.show_arrows_mobile %}d-none d-md-block{% endunless %} {% unless section.settings.show_arrows %}d-block d-md-none{% endunless %}"></div>
                    {% endif %}

                    {% if section.settings.show_dots %}
                        <div class="wrap-pagination">
                            <div class="container">
                                <div class="sw-dots style-dark sw-pagination-slider justify-content-center"></div>
                            </div>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const slider = document.querySelector('[data-slider-id="{{ section.id }}"]');
  if (!slider) return;
  
  const heightSetting = slider.getAttribute('data-height');
  const mobileHeightSetting = slider.getAttribute('data-mobile-height');
  
  // Handle adapt-first height option for both desktop and mobile
  if (heightSetting === 'adapt-first' || mobileHeightSetting === 'adapt-first') {
    const slides = slider.querySelectorAll('.swiper-slide');
    let isAdjusting = false;
    let lastHeight = 0;
    let lastMobileHeight = 0;
    
    // Function to adjust slide heights
    function adjustSlideHeights() {
      if (isAdjusting) return; // Prevent multiple simultaneous executions
      
      isAdjusting = true;
      

      
      // Check if we should use adapt-first for current viewport
      const isMobile = window.innerWidth <= 767;
      const shouldUseAdaptFirst = (isMobile && mobileHeightSetting === 'adapt-first') || 
                                 (!isMobile && heightSetting === 'adapt-first');
      
      if (shouldUseAdaptFirst) {
        // For adapt-first: ALWAYS use the first slide to determine height
        const firstSlide = slides[0];
        if (firstSlide) {
          const firstContent = firstSlide.querySelector('.slider-wrap');
          if (firstContent) {
            // Get the first slide's actual image height instead of container height
            const image = firstContent.querySelector('.image img');
            let firstHeight = 0;
            
            if (image) {
              // Check if image has loaded and has valid dimensions
              if (image.complete && image.naturalWidth > 0 && image.naturalHeight > 0) {
                // Use the actual image height when scaled to container width
                const containerWidth = firstContent.offsetWidth;
                const naturalWidth = image.naturalWidth;
                const naturalHeight = image.naturalHeight;
                
                // Calculate the scaled height while maintaining aspect ratio
                firstHeight = Math.round((containerWidth * naturalHeight) / naturalWidth);
                
              } else {
                // Image not fully loaded, use container height as fallback
                firstHeight = Math.round(firstContent.getBoundingClientRect().height);
              }
              
            } else {
              // Fallback to container height if no image found
              firstHeight = Math.round(firstContent.getBoundingClientRect().height);
            }
            
            // Ensure minimum height and check if height is reasonable
            const minHeight = isMobile ? 50 : 50; // Minimum heights for mobile/desktop
            if (firstHeight < minHeight) {
              firstHeight = minHeight;
            }
            
            // Only apply if height is reasonable and different from last height
            const currentLastHeight = isMobile ? lastMobileHeight : lastHeight;
            
            if (firstHeight >= minHeight && firstHeight !== currentLastHeight) {
              if (isMobile) {
                lastMobileHeight = firstHeight;
              } else {
                lastHeight = firstHeight;
              }
                            
              // Apply the first slide height to ALL slides
              slides.forEach((slide, index) => {
                const content = slide.querySelector('.slider-wrap');
                if (content) {
                  // Force the height with !important equivalent
                  slide.style.setProperty('height', firstHeight + 'px', 'important');
                  content.style.setProperty('height', firstHeight + 'px', 'important');
                  
                  // Also set min-height and max-height to prevent Swiper from overriding
                  slide.style.setProperty('min-height', firstHeight + 'px', 'important');
                  slide.style.setProperty('max-height', firstHeight + 'px', 'important');
                  content.style.setProperty('min-height', firstHeight + 'px', 'important');
                  content.style.setProperty('max-height', firstHeight + 'px', 'important');
                }
              });
              

              
              // Force Swiper to recalculate and respect our heights
              if (window.Swiper && slider.swiper) {
                setTimeout(() => {
                  slider.swiper.update();
                  slider.swiper.updateSize();
                  slider.swiper.updateSlides();
                }, 100);
              }

            } else {
            }
          }
        }
      }
      
      // Reset flag after a short delay
      setTimeout(() => {
        isAdjusting = false;
      }, 100);
    }
    
    // Initial adjustment - wait a bit for content to settle
    setTimeout(adjustSlideHeights, 100);
    
    // Adjust on window resize
    let resizeTimer;
    window.addEventListener('resize', function() {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(adjustSlideHeights, 250);
    });
    
    // Adjust when images are loaded
    const images = slider.querySelectorAll('img');
    let loadedImages = 0;
    
    images.forEach(img => {
      if (img.complete) {
        loadedImages++;
        if (loadedImages === images.length) {
          setTimeout(adjustSlideHeights, 100);
        }
      } else {
        img.addEventListener('load', function() {
          loadedImages++;
          if (loadedImages === images.length) {
            setTimeout(adjustSlideHeights, 100);
          }
        });
      }
    });
    
    // Final height adjustment after everything is settled
    // This ensures we get the final, stable height
    setTimeout(() => {
      adjustSlideHeights();
    }, 500);
    
    // Additional check after fonts and CSS are fully loaded
    if (document.readyState === 'complete') {
      setTimeout(() => {
        adjustSlideHeights();
      }, 1000);
    } else {
      window.addEventListener('load', () => {
        setTimeout(() => {
          adjustSlideHeights();
        }, 1000);
      });
    }
  }
});
</script>