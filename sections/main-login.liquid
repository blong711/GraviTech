<!-- sections/main-login.liquid -->

<div
  class="
    login-section section-spacing flat-spacing-13  color-{{ section.settings.color_scheme }}
    section-{{ section.id }}-padding
  "
>
  <div class="{{ section.settings.width }}">
    <div class="login-grid grid-2-cols">
      {%- for block in section.blocks -%}
        {%- case block.type -%}
          {%- when 'form' -%}
            <div class="login-form">
              <div id="login-form-block">
                <h2 class="display-sm fw-medium mb-5">{{ 'sections.main_login.log_in' | t }}</h2>
                <div id="login">
                  {%- form 'customer_login', id: 'main-customer-login' -%}
                    {%- if form.errors -%}
                      <div class="form-message error">
                        <ul class="error-list">
                          {%- for field in form.errors -%}
                            <li>
                              {%- if field == 'form' -%}
                                {{ form.errors.messages[field] }}
                              {%- else -%}
                                <a href="#{{ field }}">
                                  {{ form.errors.translated_fields[field] | capitalize }}
                                  {{ form.errors.messages[field] }}
                                </a>
                              {%- endif -%}
                            </li>
                          {%- endfor -%}
                        </ul>
                      </div>
                    {%- endif -%}
                    <div class="form-field">
                      <input
                        class="form-input"
                        type="email"
                        name="customer[email]"
                        id="CustomerEmail-{{ section.id }}"
                        autocomplete="email"
                        autocorrect="off"
                        autocapitalize="off"
                        required
                        aria-required="true"
                        aria-describedby="email-error-{{ section.id }}"
                        {% if form.errors contains 'form' %}
                          aria-invalid="true"
                        {% endif %}
                        placeholder="{{ 'sections.main_login.email' | t }} *"
                      >
                      <div id="email-error-{{ section.id }}" class="error-message" aria-live="polite" style="display: none;"></div>
                    </div>
                    <div class="form-field">
                      <input
                        class="form-input"
                        type="password"
                        value=""
                        name="customer[password]"
                        id="CustomerPassword-{{ section.id }}"
                        autocomplete="current-password"
                        required
                        minlength="6"
                        aria-required="true"
                        aria-describedby="password-error-{{ section.id }}"
                        placeholder="{{ 'sections.main_login.password' | t }} *"
                      >
                      <div id="password-error-{{ section.id }}" class="error-message" aria-live="polite" style="display: none;"></div>
                    </div>
                    <div class="form-field">
                      <a href="#" class="forgot-link link mt-4 mb-4" id="show-reset-form">
                        {{- 'sections.main_login.forgot_password' | t -}}
                      </a>
                    </div>
                    <button class="btn tf-btn {% if block.settings.btn_full %}btn-full{% endif %}" type="submit">
                      {{ 'sections.main_login.log_in' | t }}
                    </button>
                  {%- endform -%}
                </div>
              </div>
              <div id="reset-form-block" style="display:none;">
                <h2 class="display-sm fw-medium mb-4">{{ 'sections.main_login.reset_password' | t }}</h2>
                <p class="body-text mb-5">{{ 'sections.main_login.reset_description' | t }}</p>
                {%- form 'recover_customer_password' -%}
                  {%- if form.errors -%}
                    <div class="form-message error">
                      <ul class="error-list">
                        {%- for field in form.errors -%}
                          <li>
                            {%- if field == 'form' -%}
                              {{ form.errors.messages[field] }}
                            {%- else -%}
                              <a href="#{{ field }}">
                                {{ form.errors.translated_fields[field] | capitalize }}
                                {{ form.errors.messages[field] }}
                              </a>
                            {%- endif -%}
                          </li>
                        {%- endfor -%}
                      </ul>
                    </div>
                  {%- endif -%}
                  {%- if form.posted_successfully? -%}
                    <div class="form-message success">
                      <svg
                        class="success-icon"
                        xmlns="http://www.w3.org/2000/svg"
                        width="20"
                        height="20"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                      >
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                      </svg>
                      <span>{{ 'sections.main_login.reset_success_message' | t }}</span>
                    </div>
                  {%- endif -%}
                  <div class="form-field">
                    <input
                      class="form-input"
                      type="email"
                      name="email"
                      id="RecoverEmail-{{ section.id }}"
                      autocomplete="email"
                      autocorrect="off"
                      autocapitalize="off"
                      placeholder="{{ 'sections.main_login.email' | t }} *"
                      required
                    >
                  </div>
                  <div class="form-field">
                    <a href="#" class="forgot-link link mt-4 mb-4" id="back-to-login">
                      {{- 'sections.main_login.back_to_login' | t -}}
                    </a>
                  </div>
                  <div class="form-field">
                    <button class="btn tf-btn {% if block.settings.btn_full %}btn-full{% endif %}" type="submit">
                      {{ 'sections.main_login.submit' | t }}
                    </button>
                  </div>
                {%- endform -%}
              </div>
            </div>
          {%- else -%}
            <div class="login-content">
              {%- if block.settings.title != blank -%}
                <h2 class="display-sm fw-medium mb-4">{{ block.settings.title }}</h2>
              {%- endif -%}
              {%- if block.settings.description != blank -%}
                <p class="body-text mb-5">{{ block.settings.description }}</p>
              {%- endif -%}
              <a href="{{ routes.account_register_url }}" class="register-link link mt-4 mb-4">
                {{ 'sections.main_login.register' | t }}
                <svg
                  class="hdt-icon hdt-icon-2 hdt-inline-block"
                  xmlns="http://www.w3.org/2000/svg"
                  width="8"
                  height="8"
                  viewBox="0 0 8 8"
                  fill="currentColor"
                >
                  <path d="M0.861539 8L0 7.13846L5.90769 1.23077H0.615385V0H8V7.38462H6.76923V2.09231L0.861539 8Z"></path>
                </svg>
              </a>
            </div>
        {%- endcase -%}
      {%- endfor -%}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    var showReset = document.getElementById('show-reset-form');
    var backToLogin = document.getElementById('back-to-login');
    var loginBlock = document.getElementById('login-form-block');
    var resetBlock = document.getElementById('reset-form-block');

    if (showReset && backToLogin && loginBlock && resetBlock) {
      showReset.addEventListener('click', function (e) {
        e.preventDefault();
        loginBlock.style.display = 'none';
        resetBlock.style.display = 'block';
      });

      backToLogin.addEventListener('click', function (e) {
        e.preventDefault();
        resetBlock.style.display = 'none';
        loginBlock.style.display = 'block';
      });
    }

    // Email validation function
    function isValidEmail(email) {
      // More robust email validation regex
      var emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
      return emailRegex.test(email);
    }
    
    // Helper function to show field-specific errors
    function showFieldError(input, message, fieldType) {
      // Remove existing error for this field
      removeFieldError(input, fieldType);
      
      // Find the error message container
      var errorContainer = input.parentNode.querySelector('.error-message');
      if (errorContainer) {
        errorContainer.innerHTML = '<ul class="error-list"><li>' + message + '</li></ul>';
        errorContainer.style.display = 'block';
        errorContainer.className = 'error-message form-message error field-error';
      }
      
      // Add error styling to input
      input.classList.add('error');
      input.setAttribute('aria-invalid', 'true');
    }
    
    // Helper function to remove field-specific errors
    function removeFieldError(input, fieldType) {
      var errorContainer = input.parentNode.querySelector('.error-message');
      if (errorContainer) {
        errorContainer.innerHTML = '';
        errorContainer.style.display = 'none';
        errorContainer.className = 'error-message';
      }
      input.classList.remove('error');
      input.setAttribute('aria-invalid', 'false');
    }

    // Handle login form submission with validation
    var loginForm = document.querySelector('#login form');
    if (loginForm) {
      // Add real-time validation feedback
      var emailInput = document.getElementById('CustomerEmail-{{ section.id }}');
      var passwordInput = document.getElementById('CustomerPassword-{{ section.id }}');
      
      // Real-time email validation
      if (emailInput) {
        emailInput.addEventListener('input', function() {
          removeFieldError(this, 'email');
          if (this.value.trim() && !isValidEmail(this.value.trim())) {
            showFieldError(this, '{{ "sections.main_login.email_invalid" | t }}', 'email');
          }
        });
      }
      
      // Real-time password validation
      if (passwordInput) {
        passwordInput.addEventListener('input', function() {
          removeFieldError(this, 'password');
          if (this.value.trim() && this.value.length < 6) {
            showFieldError(this, '{{ "sections.main_login.password_too_short" | t }}', 'password');
          }
        });
      }
      
      loginForm.addEventListener('submit', function (e) {
        var email = document.getElementById('CustomerEmail-{{ section.id }}').value.trim();
        var password = document.getElementById('CustomerPassword-{{ section.id }}').value.trim();
        var hasError = false;
        
        // Remove any existing messages
        var existingMessages = loginForm.querySelectorAll('.form-message');
        existingMessages.forEach(function (msg) {
          msg.remove();
        });
        
        // Check if email is empty
        if (!email) {
          var emailError = document.createElement('div');
          emailError.className = 'form-message error';
          emailError.innerHTML = '<ul class="error-list"><li>{{ "sections.main_login.email_missing" | t }}</li></ul>';
          loginForm.insertBefore(emailError, loginForm.firstChild);
          hasError = true;
        } else if (!isValidEmail(email)) {
          // Check if email format is valid
          var emailError = document.createElement('div');
          emailError.className = 'form-message error';
          emailError.innerHTML = '<ul class="error-list"><li>{{ "sections.main_login.email_invalid" | t }}</li></ul>';
          loginForm.insertBefore(emailError, loginForm.firstChild);
          hasError = true;
        } else if (!email.includes('@') || !email.includes('.')) {
          // Additional basic email format check
          var emailError = document.createElement('div');
          emailError.className = 'form-message error';
          emailError.innerHTML = '<ul class="error-list"><li>{{ "sections.main_login.email_invalid" | t }}</li></ul>';
          loginForm.insertBefore(emailError, loginForm.firstChild);
          hasError = true;
        }
        
        // Check if password is empty
        if (!password) {
          var passwordError = document.createElement('div');
          passwordError.className = 'form-message error';
          passwordError.innerHTML = '<ul class="error-list"><li>{{ "sections.main_login.password_missing" | t }}</li></ul>';
          loginForm.insertBefore(passwordError, loginForm.firstChild);
          hasError = true;
        } else if (password.length < 6) {
          // Check if password meets minimum length requirement
          var passwordError = document.createElement('div');
          passwordError.className = 'form-message error';
          passwordError.innerHTML = '<ul class="error-list"><li>{{ "sections.main_login.password_too_short" | t }}</li></ul>';
          loginForm.insertBefore(passwordError, loginForm.firstChild);
          hasError = true;
        }
        
        // If there are validation errors, prevent submission
        if (hasError) {
          e.preventDefault();
          return;
        }
        
        // If validation passes, show loading state but allow form to submit naturally
        var submitButton = this.querySelector('button[type="submit"]');
        var originalButtonText = submitButton.textContent;
        
        // Disable submit button and show loading state
        submitButton.disabled = true;
        submitButton.textContent = '{{ "sections.main_login.logging_in" | t }}';
        
        // Don't prevent default - let the form submit naturally with CAPTCHA
        // The form will submit with all necessary tokens intact
      });
    }

    // Handle reset password form submission via AJAX
    var resetForm = document.querySelector('#reset-form-block form');
    if (resetForm) {
      resetForm.addEventListener('submit', function (e) {
        e.preventDefault();

        var formData = new FormData(this);
        var submitButton = this.querySelector('button[type="submit"]');
        var originalButtonText = submitButton.textContent;

        // Disable submit button and show loading state
        submitButton.disabled = true;
        submitButton.textContent = '{{ "sections.main_login.sending" | t }}';

        // Remove any existing messages
        var existingMessages = resetBlock.querySelectorAll('.form-message');
        existingMessages.forEach(function (msg) {
          msg.remove();
        });

        fetch('{{ routes.account_recover_url }}', {
          method: 'POST',
          body: formData,
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
          },
        })
          .then(function (response) {
            return response.text();
          })
          .then(function (html) {
            // Create a temporary div to parse the response
            var tempDiv = document.createElement('div');
            // Use HTMLSanitizer to safely set HTML content
            HTMLSanitizer.setInnerHTML(tempDiv, html);

            // Check if there are any error messages in the response
            var errorMessages = tempDiv.querySelectorAll('.form-message.error');
            var successMessages = tempDiv.querySelectorAll('.form-message.success');

            if (errorMessages.length > 0) {
              // Show error message
              var errorContainer = document.createElement('div');
              errorContainer.className = 'form-message error';
              // Sanitize error message content
              HTMLSanitizer.setInnerHTML(errorContainer, errorMessages[0].innerHTML);
              resetForm.insertBefore(errorContainer, resetForm.firstChild);
            } else if (successMessages.length > 0) {
              // Show success message
              var successContainer = document.createElement('div');
              successContainer.className = 'form-message success';
              // Sanitize success message content
              HTMLSanitizer.setInnerHTML(successContainer, successMessages[0].innerHTML);
              resetForm.insertBefore(successContainer, resetForm.firstChild);

              // Clear the form
              resetForm.reset();
            } else {
              // Generic success message if no specific message found
              var genericSuccess = document.createElement('div');
              genericSuccess.className = 'form-message success';
              // Use HTMLSanitizer.createElement for safe HTML creation
              const successIcon = HTMLSanitizer.createElement('svg', {
                class: 'success-icon',
                xmlns: 'http://www.w3.org/2000/svg',
                width: '20',
                height: '20',
                viewBox: '0 0 20 20',
                fill: 'currentColor',
              });
              const path = HTMLSanitizer.createElement('path', {
                'fill-rule': 'evenodd',
                d: 'M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z',
                'clip-rule': 'evenodd',
              });
              successIcon.appendChild(path);
              genericSuccess.appendChild(successIcon);

              const messageSpan = HTMLSanitizer.createElement(
                'span',
                {},
                "{{ 'sections.main_login.reset_success' | t }}"
              );
              genericSuccess.appendChild(messageSpan);

              resetForm.insertBefore(genericSuccess, resetForm.firstChild);

              // Clear the form
              resetForm.reset();
            }
          })
          .catch(function (error) {
            // Always show success message even if there's an error
            var successContainer = document.createElement('div');
            successContainer.className = 'form-message success';
            
            const successIcon = HTMLSanitizer.createElement('svg', {
              class: 'success-icon',
              xmlns: 'http://www.w3.org/2000/svg',
              width: '20',
              height: '20',
              viewBox: '0 0 20 20',
              fill: 'currentColor',
            });
            const path = HTMLSanitizer.createElement('path', {
              'fill-rule': 'evenodd',
              d: 'M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z',
              'clip-rule': 'evenodd',
            });
            successIcon.appendChild(path);
            successContainer.appendChild(successIcon);

            const messageSpan = HTMLSanitizer.createElement(
              'span',
              {},
              "{{ 'sections.main_login.reset_success' | t }}"
            );
            successContainer.appendChild(messageSpan);
            
            resetForm.insertBefore(successContainer, resetForm.firstChild);
            
            // Clear the form
            resetForm.reset();
          })
          .finally(function () {
            // Re-enable submit button
            submitButton.disabled = false;
            submitButton.textContent = originalButtonText;
          });
      });
    }
  });
</script>

{%- style -%}
    .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top }}px;
    padding-bottom: {{ section.settings.padding_bottom }}px;
  }

  @media screen and (max-width: 767px) {
    .section-{{ section.id }}-padding {
      padding-top: calc({{ section.settings.padding_top }}px * {{ section.settings.padding_mobile_rate }} / 100);
      padding-bottom: calc({{ section.settings.padding_bottom }}px * {{ section.settings.padding_mobile_rate }} / 100);
    }
  }
  #shopify-section-{{section.id}} {
    --section-pt: {{section.settings.padding_top}}px;
    --section-pb: {{section.settings.padding_bottom}}px;
    --section-prate: {{section.settings.padding_rate}};
  }

  .login-header {
    text-align: center;
    margin-top: 3rem;
    margin-bottom: 3rem;
  }

  .main-login-heading {
    font-size: 2.5rem;
    font-weight: 400;
    margin: 0;
  }

  .login-section {
    background: var(--gradient-background);
  }

  .login-grid {
    display: grid;
    gap: 12rem;
    align-items: flex-start;
    justify-content: center;
  }

  @media screen and (min-width: 770px) {
    .grid-2-cols {
      grid-template-columns: 1fr 1fr;
    }
  }

  .login-form {
    max-width: 100%;
  }

  .form-heading {
    font-size: 3rem;
    margin-bottom: 2rem;
    font-weight: 400;
  }

  @media screen and (max-width: 1024px) and (min-width: 750px) {
    .form-heading {
      font-size: 1.5rem !important;
    }
    .login-grid {
    gap: 5rem;
  }
  }
  @media screen and (max-width: 750px) {
    .form-heading {
      font-size: 24px !important;
    }
  }

  .form-description {
    margin-bottom: 2rem;
    color: rgba(var(--color-foreground), 0.75);
    font-size: 1rem;
  }

  .form-field {
    margin-bottom: 1rem;
  }

  .form-input {
    width: 100%;
    padding: 1rem;
    border: 1px solid #e5e5e5;
    border-radius: 4px;
    background: #fff;
    font-size: 1rem;
    transition: border-color 0.2s ease;
  }

  .form-input:focus {
    outline: none;
    border-color: #000;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 1rem 2rem;
    border-radius: 4px;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.2s ease;
    cursor: pointer;
    font-size: 1.5rem;
  }

  .btn-full {
    width: 100%;
  }

  .forgot-link {
    text-decoration: underline;
    text-underline-offset: 0.3em;
  }

  .form-message {
    display: flex;
    align-items: center;
    padding: 1rem;
    border-radius: 4px;
    margin-bottom: 1.5rem;
  }

  .form-message.error {
    background: #ffeaea;
    color: #d32f2f;
  }

  .form-message.success {
    background: #eaffea;
    color: #388e3c;
  }

  .error-icon,
  .success-icon {
    width: 1.25rem;
    height: 1.25rem;
    margin-right: 0.5rem;
  }

  .error-list {
    list-style: none;
    padding: 0;
    margin: 0.5rem 0 0;
  }

  .error-list li {
    margin-bottom: 0.25rem;
  }

  .error-list a {
    color: #222;
    text-decoration: underline;
    text-underline-offset: 0.3em;
  }

  .login-content {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
  }

  .register-link {
      text-decoration: underline;
      text-underline-offset: 0.3em;
  }


  @media screen and (max-width: 749px) {
    .login-header {
      margin-top: 2rem;
      margin-bottom: 2rem;
    }
    .container {
      max-width: 100%;
    }
    .login-grid {
      grid-template-columns: 1fr;
      gap: 3.5rem;
    }
    .login-content {
      align-items: center;
      text-align: center;
      padding-top: 0;
    }
    .form-heading {
      text-align: center;
    }
  }
{%- endstyle -%}

{% schema %}
{
  "name": "t:sections.main_login.name",
  "class": "section",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "select",
      "id": "width",
      "label": "t:sections.all.width.label",
      "options": [
        {
          "value": "container",
          "label": "t:sections.all.width.options.boxed"
        },
        {
          "value": "container-full",
          "label": "t:sections.all.width.options.full_width"
        }
      ],
      "default": "container"
    },
    {
      "type": "header",
      "content": "t:sections.main_login.padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 40
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 52
    },
    {
      "type": "range",
      "id": "padding_mobile_rate",
      "min": 50,
      "max": 150,
      "step": 1,
      "unit": "%",
      "label": "t:sections.all.padding.padding_mobile_rate.label",
      "default": 100
    }
  ],
  "blocks": [
    {
      "type": "form",
      "name": "t:sections.main_login.form.name",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "btn_full",
          "label": "t:sections.main_login.form.btn_full"
        }
      ]
    },
    {
      "type": "infos",
      "name": "t:sections.main_login.infos.name",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "t:sections.main_login.infos.title",
          "default": "t:sections.main_login.infos.title_default"
        },
        {
          "type": "textarea",
          "id": "description",
          "label": "t:sections.main_login.infos.description",
          "default": "t:sections.main_login.infos.description_default"
        }
      ]
    }
  ]
}
{% endschema %}
